services:
  mosquitto:
    image: eclipse-mosquitto:latest
    ports:
      - "1883:1883"  # MQTT
      - "9001:9001"  # WebSocket
    volumes:
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
    user: "1883:1883"
    restart: unless-stopped

  influxdb:
    image: influxdb:2.7
    ports:
      - "8086:8086"
    volumes:
      - ./influxdb-data:/var/lib/influxdb2
      - ./influxdb/influxdb-config.yml:/etc/influxdb2/config.yml
    user: "1000:1000"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_ADMIN_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_ADMIN_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_RETENTION=7d
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_ADMIN_TOKEN}
    restart: unless-stopped

  postgres:
    image: postgres:16
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data # Use the named volume
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/00_init_schema.sql:ro # Schema first
      - ./postgres/seed_data/01_python_intro.sql:/docker-entrypoint-initdb.d/01_python_intro.sql:ro # Seed file 1
      - ./postgres/seed_data/02_arduino_morse.sql:/docker-entrypoint-initdb.d/02_arduino_morse.sql:ro # Seed file 2
    # user: "999:999" # Removed to let the image handle internal permissions
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  nodered:
    build: ./nodered
    ports:
      - "1880:1880"
    volumes:
      - ./nodered-data:/data
    user: "1000:1000"
    environment:
      - NODE_RED_ENABLE_PROJECTS=true
      - TZ=Europe/Oslo
      - NODE_RED_CREDENTIAL_SECRET=${NODE_RED_CREDENTIAL_SECRET}
    env_file:
      - .env
    depends_on:
      - mosquitto
      - influxdb
      - postgres
    restart: unless-stopped

  webapp:
    build: ./webapp
    ports:
      - "80:5000"
    volumes:
      - ./webapp:/app
    env_file:
      - .env
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
    depends_on:
      postgres:
        condition: service_healthy # Wait for postgres healthcheck to pass
    restart: unless-stopped

  adminer:
    image: adminer:latest
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy # Wait for postgres healthcheck to pass
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "0.0.0.0:3000:3000"
    volumes:
      - ./grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    user: "472:472"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-klokkeprosjekt}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_HTTP_ADDR=0.0.0.0
    depends_on:
      influxdb:
        condition: service_started # Grafana doesn't strictly need InfluxDB ready, just started
      postgres:
        condition: service_healthy # Wait for postgres healthcheck to pass
    restart: unless-stopped

# Define named volumes so 'down -v' can remove them
volumes:
  postgres-data: # Define the volume used by postgres
    driver: local
  influxdb-data:
    driver: local
  nodered-data:
    driver: local
  grafana-data:
    driver: local
