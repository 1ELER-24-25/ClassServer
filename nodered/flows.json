{
    "nodes": [
        {
            "id": "chess-game-flow",
            "type": "tab",
            "label": "Chess Game Logic",
            "disabled": false,
            "info": "Handles chess game validation and database interactions"
        },
        {
            "id": "mqtt-start",
            "type": "mqtt in",
            "z": "chess-game-flow",
            "name": "Game Start",
            "topic": "games/chess/start",
            "qos": "1",
            "datatype": "json",
            "broker": "broker-1",
            "x": 130,
            "y": 100,
            "wires": [["start-handler"]]
        },
        {
            "id": "start-handler",
            "type": "function",
            "z": "chess-game-flow",
            "name": "Handle Game Start",
            "func": "const chess = require('chess.js')();\nconst game = {\n    id: Date.now().toString(),\n    board_id: msg.payload.board_id,\n    white: msg.payload.rfid_white,\n    black: msg.payload.rfid_black,\n    mode: msg.payload.mode,\n    time_limit: msg.payload.time_limit,\n    fen: chess.fen()\n};\n\nflow.set('game_' + game.id, game);\n\nmsg.payload = game;\nreturn msg;",
            "outputs": 1,
            "x": 340,
            "y": 100,
            "wires": [["pg-start", "influx-start"]]
        },
        {
            "id": "mqtt-move",
            "type": "mqtt in",
            "z": "chess-game-flow",
            "name": "Game Move",
            "topic": "games/chess/move",
            "qos": "1",
            "datatype": "json",
            "broker": "broker-1",
            "x": 130,
            "y": 180,
            "wires": [["move-handler"]]
        },
        {
            "id": "move-handler",
            "type": "function",
            "z": "chess-game-flow",
            "name": "Validate Move",
            "func": "const game = flow.get('game_' + msg.payload.game_id);\nif (!game) return null;\n\nconst chess = require('chess.js')(game.fen);\nconst move = chess.move(msg.payload.move);\n\nif (!move) {\n    msg.payload = {\n        status: 'illegal',\n        game_id: msg.payload.game_id,\n        board_id: msg.payload.board_id\n    };\n    return [null, msg];\n}\n\ngame.fen = chess.fen();\nflow.set('game_' + game.id, game);\n\nconst response = {\n    status: chess.isCheckmate() ? 'checkmate' : 'legal',\n    game_id: game.id,\n    board_id: game.board_id,\n    winner: chess.isCheckmate() ? (chess.turn() === 'w' ? game.black : game.white) : null\n};\n\nmsg.payload = {\n    ...msg.payload,\n    fen: game.fen,\n    status: response.status\n};\n\nreturn [msg, {payload: response}];",
            "outputs": 2,
            "x": 340,
            "y": 180,
            "wires": [["influx-move"], ["mqtt-response"]]
        },
        {
            "id": "mqtt-response",
            "type": "mqtt out",
            "z": "chess-game-flow",
            "name": "Game Response",
            "topic": "games/chess/response/${msg.payload.board_id}/${msg.payload.game_id}",
            "qos": "1",
            "retain": false,
            "broker": "broker-1",
            "x": 580,
            "y": 180,
            "wires": []
        },
        {
            "id": "pg-start",
            "type": "postgres",
            "z": "chess-game-flow",
            "name": "Insert Game",
            "query": "INSERT INTO games (game_type, player1_id, player2_id, start_time, board_id, metadata) VALUES ('chess', (SELECT id FROM users WHERE rfid_uid = $1), (SELECT id FROM users WHERE rfid_uid = $2), CURRENT_TIMESTAMP, $3, $4)",
            "postgresdb": "db-1",
            "x": 580,
            "y": 100,
            "wires": [["mqtt-response"]]
        },
        {
            "id": "influx-start",
            "type": "influxdb out",
            "z": "chess-game-flow",
            "name": "Log Game Start",
            "measurement": "chess_moves",
            "precision": "s",
            "retentionPolicy": "",
            "database": "games",
            "precisionV18FluxV20": "ms",
            "retentionPolicyV18Flux": "",
            "org": "classroom",
            "bucket": "games",
            "x": 580,
            "y": 140,
            "wires": []
        },
        {
            "id": "influx-move",
            "type": "influxdb out",
            "z": "chess-game-flow",
            "name": "Log Move",
            "measurement": "chess_moves",
            "precision": "s",
            "retentionPolicy": "",
            "database": "games",
            "precisionV18FluxV20": "ms",
            "retentionPolicyV18Flux": "",
            "org": "classroom",
            "bucket": "games",
            "token": "${INFLUXDB_ADMIN_TOKEN}",
            "x": 580,
            "y": 220,
            "wires": []
        },
        {
            "id": "broker-1",
            "type": "mqtt-broker",
            "name": "Local Broker",
            "broker": "mosquitto",
            "port": "1883",
            "clientid": "",
            "usetls": false,
            "protocolVersion": "4",
            "keepalive": "60",
            "cleansession": true,
            "birthTopic": "",
            "birthQos": "0",
            "birthPayload": "",
            "birthMsg": {},
            "closeTopic": "",
            "closeQos": "0",
            "closePayload": "",
            "closeMsg": {},
            "willTopic": "",
            "willQos": "0",
            "willPayload": "",
            "willMsg": {},
            "sessionExpiry": ""
        },
        {
            "id": "db-1",
            "type": "postgresdb",
            "name": "PostgreSQL",
            "host": "postgres",
            "port": "5432",
            "database": "classserver_db",
            "ssl": false,
            "max": "10",
            "min": "1",
            "z": "",
            "connectionTimeout": "10000"
        },
        {
            "id": "analog-sensor-flow",
            "type": "tab",
            "label": "Analog Sensor Processing",
            "nodes": [
                {
                    "id": "mqtt-sensor-in",
                    "type": "mqtt in",
                    "z": "analog-sensor-flow",
                    "name": "Sensor Data",
                    "topic": "sensors/analog/+",
                    "qos": "1",
                    "datatype": "json",
                    "broker": "broker-1",
                    "x": 130,
                    "y": 100,
                    "wires": [["process-sensor"]]
                },
                {
                    "id": "process-sensor",
                    "type": "function",
                    "z": "analog-sensor-flow",
                    "name": "Process Sensor Data",
                    "func": "// Add metadata and formatting\nconst value = msg.payload.value;\nconst deviceId = msg.payload.device_id;\nconst timestamp = msg.payload.timestamp;\n\n// Convert ADC value to voltage (ESP32 ADC is 12-bit, 0-4095)\nconst voltage = (value / 4095.0) * 3.3;\n\nmsg.payload = {\n    measurement: 'analog_sensors',\n    fields: {\n        raw_value: value,\n        voltage: voltage\n    },\n    tags: {\n        device_id: deviceId,\n        sensor_type: 'analog'\n    },\n    timestamp: timestamp\n};\n\nreturn msg;",
                    "outputs": 1,
                    "x": 350,
                    "y": 100,
                    "wires": [["influx-out", "debug"]]
                },
                {
                    "id": "influx-out",
                    "type": "influxdb out",
                    "z": "analog-sensor-flow",
                    "name": "Store to InfluxDB",
                    "influxdb": "influxdb",
                    "measurement": "analog_sensors",
                    "precision": "ms",
                    "retentionPolicy": "",
                    "x": 570,
                    "y": 100,
                    "wires": []
                },
                {
                    "id": "debug",
                    "type": "debug",
                    "z": "analog-sensor-flow",
                    "name": "Debug Output",
                    "active": true,
                    "x": 570,
                    "y": 160,
                    "wires": []
                }
            ]
        }
    ]
}

